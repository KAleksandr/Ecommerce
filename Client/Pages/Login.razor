@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>
<h3>Login</h3>
<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value=user.Email class="form-control" type="email" placeholder="Email" />
        <ValidationMessage For="@(()=> user.Email)" />
        <label for="password">Password</label>
        <InputText id="password" @bind-Value=user.Password class="form-control" type="password" placeholder="Password" />
        <ValidationMessage For="@(()=> user.Password)" />
        
    </div>
    <button class="btn btn-primary" type="submit">Login</button>   
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>

@code {
    private UserLogin user = new UserLogin();
    private string errorMessage = string.Empty;
    [Parameter]
    [SupplyParameterFromQuery]
    public string returnUrl { get; set; } = string.Empty;
    // protected override void OnInitialized()
    // {
    //     var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    // }
    async Task HandleLogin()
    {

        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = "";
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            try
            {
                NavigationManager.NavigateTo(returnUrl);
            }
            catch
            {
                NavigationManager.NavigateTo("");
            }

        }
        else
        {
            errorMessage = result.Message;
        }


    }
}
